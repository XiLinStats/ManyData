Y0_test <- matrix(NA, nrow = K, ncol = 1)
for (k in 1:K ){
dat_test <- data_exp[flds[[k]]]
dat_train <- data_exp[-flds[[k]]]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
Y1_train[k,] <- mean(dat_train$Y1_ipw)
Y1_test[k,] <- mean(dat_test[X==1]$Y)
Y0_train[k,] <- mean(dat_train$Y0_ipw)
Y0_test[k,] <- mean(dat_test[X==0]$Y)
}
Y1_train
Y1_test
Y0_train
Y0_test
dat_test[X==0]$Y
Y1_train
Y0_test
mean(Y0_test)
mean(Y0_test,na.rm = T)
mean(Y0_train,na.rm = T)
Y0_train
Y0_test
flds <- createFolds(1:nrow(data_exp), k = K, list = TRUE, returnTrain = FALSE)
Y1_train <- matrix(NA, nrow = K, ncol = 1)
Y1_test <- matrix(NA, nrow = K, ncol = 1)
Y0_train <- matrix(NA, nrow = K, ncol = 1)
Y0_test <- matrix(NA, nrow = K, ncol = 1)
for (k in 1:K ){
dat_test <- data_exp[flds[[k]]]
dat_train <- data_exp[-flds[[k]]]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
Y1_train[k,] <- mean(dat_train$Y1_ipw)
Y1_test[k,] <- mean(dat_test[X==1]$Y)
Y0_train[k,] <- mean(dat_train$Y0_ipw)
Y0_test[k,] <- mean(dat_test[X==0]$Y)
}
mean(Y0_train,na.rm = T)
mean(Y0_test,na.rm = T)
Y1_train <- matrix(NA, nrow = K, ncol = 1)
Y1_test <- matrix(NA, nrow = K, ncol = 1)
Y0_train <- matrix(NA, nrow = K, ncol = 1)
Y0_test <- matrix(NA, nrow = K, ncol = 1)
for (k in 1:K ){
dat_test <- data_exp[flds[[k]]]
dat_train <- data_exp[-flds[[k]]]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
Y1_train[k,] <- mean(dat_train$Y1_ipw)
Y1_test[k,] <- mean(dat_test[X==1]$Y)
Y0_train[k,] <- mean(dat_train$Y0_ipw)
Y0_test[k,] <- mean(dat_test[X==0]$Y)
}
mean(Y0_test,na.rm = T)
pars_obs$Y$beta[2] <- pars_exp$Y$beta[2] + bias
data_obs <- as.data.table(causl:::rfrugalParam(n = n_o, formulas = forms_obs, family = family, pars = pars_obs))
data_exp <- as.data.table(causl:::rfrugalParam(n = n_e, formulas = forms_exp, family = family, pars = pars_exp))
data_obs_ipw <- process_ipw(dat = data_obs, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
# eta_list <- matrix(NA,K,2)
flds <- createFolds(1:nrow(data_exp), k = K, list = TRUE, returnTrain = FALSE)
Y1_train <- matrix(NA, nrow = K, ncol = 1)
Y1_test <- matrix(NA, nrow = K, ncol = 1)
Y0_train <- matrix(NA, nrow = K, ncol = 1)
Y0_test <- matrix(NA, nrow = K, ncol = 1)
for (k in 1:K ){
dat_test <- data_exp[flds[[k]]]
dat_train <- data_exp[-flds[[k]]]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
Y1_train[k,] <- mean(dat_train$Y1_ipw)
Y1_test[k,] <- mean(dat_test[X==1]$Y)
Y0_train[k,] <- mean(dat_train$Y0_ipw)
Y0_test[k,] <- mean(dat_test[X==0]$Y)
}
mean(Y0_test,na.rm = T)
mean(Y0_train,na.rm = T)
mean(dat_train$Y0_ipw)
mean(data_exp[X==0]$Y)
dat_test[X==0]$Y
data_exp[X==0]$Y
flds
pars_obs$Y$beta[2] <- pars_exp$Y$beta[2] + bias
data_obs <- as.data.table(causl:::rfrugalParam(n = n_o, formulas = forms_obs, family = family, pars = pars_obs))
data_exp <- as.data.table(causl:::rfrugalParam(n = n_e, formulas = forms_exp, family = family, pars = pars_exp))
data_obs_ipw <- process_ipw(dat = data_obs, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
# eta_list <- matrix(NA,K,2)
flds <- createFolds(1:nrow(data_exp), k = K, list = TRUE, returnTrain = FALSE)
Y1_train <- matrix(NA, nrow = K, ncol = 1)
Y1_test <- matrix(NA, nrow = K, ncol = 1)
Y0_train <- matrix(NA, nrow = K, ncol = 1)
Y0_test <- matrix(NA, nrow = K, ncol = 1)
for (k in 1:K ){
dat_test <- data_exp[flds[[k]]]
dat_train <- data_exp[-flds[[k]]]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
Y1_train[k,] <- mean(dat_train$Y1_ipw)
Y1_test[k,] <- mean(dat_test[X==1]$Y)
Y0_train[k,] <- mean(dat_train$Y0_ipw)
Y0_test[k,] <- mean(dat_test[X==0]$Y)
}
mean(Y0_test,na.rm = T)
dat_test
dat_test[X==0]
mean(dat_test[X==0]$Y)
mean(dat_exp[X==1]$Y)
mean(data_exp[X==1]$Y)
mean(data_exp[X==0]$Y)
mean(Y0_test,na.rm = T)
mean(data_exp_ipw$Y0_ipw)
mean(data_exp_ipw$Y1_ipw)
mean(data_exp[X==1]$Y - data_exp[X==0]$Y)
dmean(data_exp[X==1]$Y) - mean(data_exp[X==0]$Y)
mean(data_exp[X==1]$Y) - mean(data_exp[X==0]$Y)
mean(data_exp_ipw$Y1_ipw - data_exp_ipw$Y0_ipw)
data_obs <- as.data.table(causl:::rfrugalParam(n = n_o, formulas = forms_obs, family = family, pars = pars_obs))
data_exp <- as.data.table(causl:::rfrugalParam(n = n_e, formulas = forms_exp, family = family, pars = pars_exp))
data_obs_ipw <- process_ipw(dat = data_obs, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
mean(data_exp_ipw$Y1_ipw - data_exp_ipw$Y0_ipw)
mean(data_exp[X==1]$Y) - mean(data_exp[X==0]$Y)
debugonce(process_ipw)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
trt_fl
glm(form_pi, data = dat,family = "binomial")
mu_model <- glm(form_mu, data = dat)
mu_model
View(dat_0)
View(dat_1)
View(dat_1)
View(dat_1)
process_ipw <- function(dat, form_pi, form_mu){
trt_fl <- lhs(form_pi)
dat$pi <- fitted(glm(form_pi, data = dat,family = "binomial"))
mu_model <- glm(form_mu, data = dat)
dat_1 <- dat_0 <- dat
dat_1[,(trt_fl) := 1]
dat_0[,(trt_fl) := 0]
dat$mu_1 <- predict(mu_model,dat_1)
dat$mu_0 <- predict(mu_model,dat_0)
dat[, Y1_ipw := get(trt_fl) *(Y - mu_1)/pi + mu_1]
dat[, Y0_ipw := (1-get(trt_fl)) *(Y - mu_0)/(1-pi) + mu_0]
}
process_ipw <- function(dat, form_pi, form_mu){
trt_fl <- lhs(form_pi)
dat$pi <- fitted(glm(form_pi, data = dat,family = "binomial"))
mu_model <- glm(form_mu, data = dat)
dat_1 <- dat
dat_0 <- dat
dat_1[,(trt_fl) := 1]
dat_0[,(trt_fl) := 0]
dat$mu_1 <- predict(mu_model,dat_1)
dat$mu_0 <- predict(mu_model,dat_0)
dat[, Y1_ipw := get(trt_fl) *(Y - mu_1)/pi + mu_1]
dat[, Y0_ipw := (1-get(trt_fl)) *(Y - mu_0)/(1-pi) + mu_0]
}
debugonce(process_ipw)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
View(dat_0)
View(dat_1)
View(dat_1)
debugonce(process_ipw)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
View(dat_1)
View(dat_0)
View(dat_1)
View(dat_0)
View(dat_1)
View(dat_1)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
debugonce(process_ipw)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
View(dat_0)
View(dat_1)
View(dat_1)
View(dat)
dat_1 <- dat
View(dat_1)
View(dat)
View(dat)
process_ipw <- function(dat, form_pi, form_mu){
trt_fl <- lhs(form_pi)
dat$pi <- fitted(glm(form_pi, data = dat,family = "binomial"))
mu_model <- glm(form_mu, data = dat)
dat_1 <- copy(dat)
dat_0 <- copy(dat)
dat_1[,(trt_fl) := 1]
dat_0[,(trt_fl) := 0]
dat$mu_1 <- predict(mu_model,dat_1)
dat$mu_0 <- predict(mu_model,dat_0)
dat[, Y1_ipw := get(trt_fl) *(Y - mu_1)/pi + mu_1]
dat[, Y0_ipw := (1-get(trt_fl)) *(Y - mu_0)/(1-pi) + mu_0]
}
process_ipw <- function(dat, form_pi, form_mu){
trt_fl <- lhs(form_pi)
dat$pi <- fitted(glm(form_pi, data = dat,family = "binomial"))
mu_model <- glm(form_mu, data = dat)
dat_1 <- copy(dat)
dat_0 <- copy(dat)
dat_1[,(trt_fl) := 1]
dat_0[,(trt_fl) := 0]
dat$mu_1 <- predict(mu_model,dat_1)
dat$mu_0 <- predict(mu_model,dat_0)
dat[, Y1_ipw := get(trt_fl) *(Y - mu_1)/pi + mu_1]
dat[, Y0_ipw := (1-get(trt_fl)) *(Y - mu_0)/(1-pi) + mu_0]
}
View(data_exp_ipw)
debugonce(process_ipw)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
View(dat_1)
View(dat)
process_ipw <- function(dat, form_pi, form_mu){
trt_fl <- lhs(form_pi)
dat$pi <- fitted(glm(form_pi, data = dat,family = "binomial"))
mu_model <- glm(form_mu, data = dat)
dat_1 <- copy(dat)
dat_0 <- copy(dat)
dat_1[,(trt_fl) := 1]
dat_0[,(trt_fl) := 0]
dat$mu_1 <- predict(mu_model,dat_1)
dat$mu_0 <- predict(mu_model,dat_0)
dat[, Y1_ipw := get(trt_fl) *(Y - mu_1)/pi + mu_1]
dat[, Y0_ipw := (1-get(trt_fl)) *(Y - mu_0)/(1-pi) + mu_0]
}
process_ipw <- function(dat, form_pi, form_mu){
trt_fl <- lhs(form_pi)
dat$pi <- fitted(glm(form_pi, data = dat,family = "binomial"))
mu_model <- glm(form_mu, data = dat)
dat_1 <- copy(dat)
dat_0 <- copy(dat)
dat_1[,(trt_fl) := 1]
dat_0[,(trt_fl) := 0]
dat$mu_1 <- predict(mu_model,dat_1)
dat$mu_0 <- predict(mu_model,dat_0)
dat[, Y1_ipw := get(trt_fl) *(Y - mu_1)/pi + mu_1]
dat[, Y0_ipw := (1-get(trt_fl)) *(Y - mu_0)/(1-pi) + mu_0]
}
func <- function(){
out <- matrix(NA,ncol = 6, nrow = length(bias_list))
for (b in 1:length(bias_list)){
bias <- bias_list[b]
pars_obs$Y$beta[2] <- pars_exp$Y$beta[2] + bias
data_obs <- as.data.table(causl:::rfrugalParam(n = n_o, formulas = forms_obs, family = family, pars = pars_obs))
data_exp <- as.data.table(causl:::rfrugalParam(n = n_e, formulas = forms_exp, family = family, pars = pars_exp))
data_obs_ipw <- process_ipw(dat = data_obs, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
# eta_list <- matrix(NA,K,2)
flds <- createFolds(1:nrow(data_exp), k = K, list = TRUE, returnTrain = FALSE)
Y1_train <- matrix(NA, nrow = K, ncol = 1)
Y1_test <- matrix(NA, nrow = K, ncol = 1)
Y0_train <- matrix(NA, nrow = K, ncol = 1)
Y0_test <- matrix(NA, nrow = K, ncol = 1)
for (k in 1:K ){
dat_test <- data_exp[flds[[k]]]
dat_train <- data_exp[-flds[[k]]]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
Y1_train[k,] <- mean(dat_train$Y1_ipw)
Y1_test[k,] <- mean(dat_test[X==1]$Y)
Y0_train[k,] <- mean(dat_train$Y0_ipw)
Y0_test[k,] <- mean(dat_test[X==0]$Y)
}
# alpha <- 0.5
# sum((Y1_test - ((1-alpha)*Y1_train + alpha *mean(data_obs_ipw$Y1_ipw)))^2)
#
# rss(alpha = 0)
eta_select <- choose_eta_new2( Y1_train, Y1_test, Y0_train, Y0_test, n_o , n_t = (1-1/K)*n_e)
tau_eta <- calc_combined_ipw(dat_exp = data_exp_ipw, dat_obs = data_obs_ipw, eta = eta_select)$tau
tau_0 <- calc_combined_ipw(dat_exp = data_exp_ipw, dat_obs = data_obs_ipw, eta =c (0,0))$tau
tau_1 <- calc_combined_ipw(dat_exp = data_exp_ipw, dat_obs = data_obs_ipw, eta = c(1,1))$tau
out[b,] <- c(bias,eta_select, tau_eta,tau_0,tau_1)
}
return(out)
}
# func()
res <- matrix(NA,ncol = 6)
start <- Sys.time()
print(paste0("start of parallelisation :",Sys.time()))
results1 <- foreach(
i = 1:n_boot,
.combine = 'rbind',
.packages = c('caret','data.table','causl','MASS','doParallel')
) %dopar% {
.GlobalEnv$pars_obs <- pars_obs
.GlobalEnv$pars_exp <- pars_exp
x <- func()
return(x)
}
print(Sys.time() - start)
res <- as.data.table(results1)
colnames(res) <- c("bias","eta1","eta0","tau_eta","tau_0","tau_1")
res[, lapply(.SD, function(x){ sqrt(mean((x - 0.8)^2))}), .SDcols = c("tau_eta","tau_0","tau_1"),by = bias]
process_ipw()
process_ipw
pars_obs$Y$beta[2] <- pars_exp$Y$beta[2] + bias
data_obs <- as.data.table(causl:::rfrugalParam(n = n_o, formulas = forms_obs, family = family, pars = pars_obs))
data_exp <- as.data.table(causl:::rfrugalParam(n = n_e, formulas = forms_exp, family = family, pars = pars_exp))
data_obs_ipw <- process_ipw(dat = data_obs, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
mean(data_exp_ipw$Y1_ipw) - mean(data_exp_ipw$Y0_ipw)
mean(data_exp[X==1$Y) - mean(data_exp[X==0$Y)
mean(data_exp[X==1]$Y) - mean(data_exp[X==0]$Y)
pars_obs$Y$beta[2] <- pars_exp$Y$beta[2] + bias
data_obs <- as.data.table(causl:::rfrugalParam(n = n_o, formulas = forms_obs, family = family, pars = pars_obs))
data_exp <- as.data.table(causl:::rfrugalParam(n = n_e, formulas = forms_exp, family = family, pars = pars_exp))
data_obs_ipw <- process_ipw(dat = data_obs, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
mean(data_exp[X==1]$Y) - mean(data_exp[X==0]$Y)
mean(data_exp_ipw$Y1_ipw) - mean(data_exp_ipw$Y0_ipw)
flds <- createFolds(1:nrow(data_exp), k = K, list = TRUE, returnTrain = FALSE)
Y1_train <- matrix(NA, nrow = K, ncol = 1)
Y1_test <- matrix(NA, nrow = K, ncol = 1)
Y0_train <- matrix(NA, nrow = K, ncol = 1)
Y0_test <- matrix(NA, nrow = K, ncol = 1)
for (k in 1:K ){
dat_test <- data_exp[flds[[k]]]
dat_train <- data_exp[-flds[[k]]]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
Y1_train[k,] <- mean(dat_train$Y1_ipw)
Y1_test[k,] <- mean(dat_test[X==1]$Y)
Y0_train[k,] <- mean(dat_train$Y0_ipw)
Y0_test[k,] <- mean(dat_test[X==0]$Y)
}
mean(Y0_test)
mean(Y0_test,na.rm)
mean(Y0_test,na.rm = T)
mean(Y0_train,na.rm = T)
mean(data_exp_ipw$Y0_ipw)
mean(data_exp[X==0]$Y,na.rm = T)
# bias_list <- c(0,0.1)
K <- 5
for (k in 1:K ){
dat_test <- data_exp[flds[[k]]]
dat_train <- data_exp[-flds[[k]]]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
Y1_train[k,] <- mean(dat_train$Y1_ipw)
Y1_test[k,] <- mean(dat_test[X==1]$Y)
Y0_train[k,] <- mean(dat_train$Y0_ipw)
Y0_test[k,] <- mean(dat_test[X==0]$Y)
}
mean(Y0_test,na.rm = T)
Y1_train <- matrix(NA, nrow = K, ncol = 1)
Y1_test <- matrix(NA, nrow = K, ncol = 1)
Y0_train <- matrix(NA, nrow = K, ncol = 1)
Y0_test <- matrix(NA, nrow = K, ncol = 1)
for (k in 1:K ){
dat_test <- data_exp[flds[[k]]]
dat_train <- data_exp[-flds[[k]]]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
Y1_train[k,] <- mean(dat_train$Y1_ipw)
Y1_test[k,] <- mean(dat_test[X==1]$Y)
Y0_train[k,] <- mean(dat_train$Y0_ipw)
Y0_test[k,] <- mean(dat_test[X==0]$Y)
}
flds <- createFolds(1:nrow(data_exp), k = K, list = TRUE, returnTrain = FALSE)
Y1_train <- matrix(NA, nrow = K, ncol = 1)
Y1_test <- matrix(NA, nrow = K, ncol = 1)
Y0_train <- matrix(NA, nrow = K, ncol = 1)
Y0_test <- matrix(NA, nrow = K, ncol = 1)
for (k in 1:K ){
dat_test <- data_exp[flds[[k]]]
dat_train <- data_exp[-flds[[k]]]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
Y1_train[k,] <- mean(dat_train$Y1_ipw)
Y1_test[k,] <- mean(dat_test[X==1]$Y)
Y0_train[k,] <- mean(dat_train$Y0_ipw)
Y0_test[k,] <- mean(dat_test[X==0]$Y)
}
mean(Y0_test,na.rm = T)
mean(data_exp[X==0]$Y,na.rm = T)
i<-1
dat_train <- data_exp[-i]
dat_train
dat_test <- data_exp[i]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
if (dat_test$X == 1)
(dat_test$X == 1)
Y1_train <- NULL
mean(dat_train$Y0_ipw)
Y0_train<-c(Y1_train, mean(dat_train$Y0_ipw))
Y0_train
Y1_train <- NULL
Y0_train <- NULL
for (i in 1:nrow(data_exp)){
dat_train <- data_exp[-i]
dat_test <- data_exp[i]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
if (dat_test$X == 1){
Y1_train<-c(Y1_train, mean(dat_train$Y1_ipw))
}else{
Y0_train<-c(Y1_train, mean(dat_train$Y0_ipw))
}
}
Y1_train
Y0_train
Y1_test <- data_exp[X==1]%Y
Y1_test <- data_exp[X==1]$Y
Y0_test <- data_exp[X==0]$Y
mean(Y1_test)
mean(Y1_train)
choose_eta_new2 <- function( Y1_train, Y1_test, Y0_train, Y0_test,n_o,n_t){
eta1 <- optimize( f = rss_eta, interval = c(0,1),n_t, n_o, Y1_train, Y1_test, Y0_train, Y0_test,Y1_or_0 ="1")$minimum
eta0 <- optimize( f = rss_eta, interval = c(0,1),n_t, n_o, Y1_train, Y1_test, Y0_train, Y0_test,Y1_or_0 ="0")$minimum
return(c(eta1, eta0))
}
choose_eta_new2( Y1_train, Y1_test, Y0_train, Y0_test, n_o , n_t = (1-1/K)*n_e)
choose_eta_new2( Y1_train, Y1_test, Y0_train, Y0_test, n_o , n_t = n_e)
warnings()
Y1_test
(n_t/(n_t +eta * n_o))*Y1_train
n_t = n_e
(n_t/(n_t +eta * n_o))*Y1_train
eta <- 1
(n_t/(n_t +eta * n_o))*Y1_train
(eta *n_o/(n_t +eta * n_o))
mean(data_obs_ipw$Y1_ipw))
mean(data_obs_ipw$Y1_ipw)))
mean(data_obs_ipw$Y1_ipw)
mean(Y1_test)
Y1_train
mean(data_exp[X==1$Y)
mean(data_exp[X==1]$Y)
mean(data_exp_ipw$Y1_ipw)
((n_t/(n_t +eta * n_o))*Y1_train + (eta *n_o/(n_t +eta * n_o)) *mean(data_obs_ipw$Y1_ipw))
(Y1_test - ((n_t/(n_t +eta * n_o))*Y1_train + (eta *n_o/(n_t +eta * n_o)) *mean(data_obs_ipw$Y1_ipw)))^2
sum((Y1_test - ((n_t/(n_t +eta * n_o))*Y1_train + (eta *n_o/(n_t +eta * n_o)) *mean(data_obs_ipw$Y1_ipw)))^2)
choose_eta_new2( Y1_train, Y1_test, Y0_train, Y0_test, n_o , n_t = n_e)
warnings()
(n_t/(n_t +eta * n_o))*Y0_train
(eta *n_o/(n_t +eta * n_o)) *mean(data_obs_ipw$Y0_ipw)
(n_t/(n_t +eta * n_o))*Y0_train + (eta *n_o/(n_t +eta * n_o)) *mean(data_obs_ipw$Y0_ipw))
((n_t/(n_t +eta * n_o))*Y0_train + (eta *n_o/(n_t +eta * n_o)) *mean(data_obs_ipw$Y0_ipw))
Y0_test
Y1_test
sum((Y0_test - ((n_t/(n_t +eta * n_o))*Y0_train + (eta *n_o/(n_t +eta * n_o)) *mean(data_obs_ipw$Y0_ipw)))^2)
sum((Y1_test - ((n_t/(n_t +eta * n_o))*Y1_train + (eta *n_o/(n_t +eta * n_o)) *mean(data_obs_ipw$Y1_ipw)))^2)
Y0_train
length(Y0_train)
length(Y0_test)
Y1_train <- NULL
Y0_train <- NULL
for (i in 1:nrow(data_exp)){
dat_train <- data_exp[-i]
dat_test <- data_exp[i]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
if (dat_test$X == 1){
Y1_train<-c(Y1_train, mean(dat_train$Y1_ipw))
}else{
Y0_train<-c(Y0_train, mean(dat_train$Y0_ipw))
}
}
Y1_test <- data_exp[X == 1]$Y
Y0_test <- data_exp[X == 0]$Y
choose_eta_new2( Y1_train, Y1_test, Y0_train, Y0_test, n_o , n_t = n_e)
func <- function(){
out <- matrix(NA,ncol = 6, nrow = length(bias_list))
for (b in 1:length(bias_list)){
bias <- bias_list[b]
pars_obs$Y$beta[2] <- pars_exp$Y$beta[2] + bias
data_obs <- as.data.table(causl:::rfrugalParam(n = n_o, formulas = forms_obs, family = family, pars = pars_obs))
data_exp <- as.data.table(causl:::rfrugalParam(n = n_e, formulas = forms_exp, family = family, pars = pars_exp))
data_obs_ipw <- process_ipw(dat = data_obs, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
data_exp_ipw <- process_ipw(dat = data_exp, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
# eta_list <- matrix(NA,K,2)
# flds <- createFolds(1:nrow(data_exp), k = K, list = TRUE, returnTrain = FALSE)
Y1_train <- NULL
Y0_train <- NULL
for (i in 1:nrow(data_exp)){
dat_train <- data_exp[-i]
dat_test <- data_exp[i]
dat_train <- process_ipw(dat = dat_train, form_pi = X ~ Z1*Z2, form_mu = Y ~  X*Z1*Z2)
if (dat_test$X == 1){
Y1_train<-c(Y1_train, mean(dat_train$Y1_ipw))
}else{
Y0_train<-c(Y0_train, mean(dat_train$Y0_ipw))
}
}
Y1_test <- data_exp[X == 1]$Y
Y0_test <- data_exp[X == 0]$Y
eta_select <- choose_eta_new2( Y1_train, Y1_test, Y0_train, Y0_test, n_o , n_t = n_e)
# alpha <- 0.5
# sum((Y1_test - ((1-alpha)*Y1_train + alpha *mean(data_obs_ipw$Y1_ipw)))^2)
#
# rss(alpha = 0)
# eta_select <- choose_eta_new2( Y1_train, Y1_test, Y0_train, Y0_test, n_o , n_t = (1-1/K)*n_e)
tau_eta <- calc_combined_ipw(dat_exp = data_exp_ipw, dat_obs = data_obs_ipw, eta = eta_select)$tau
tau_0 <- calc_combined_ipw(dat_exp = data_exp_ipw, dat_obs = data_obs_ipw, eta =c (0,0))$tau
tau_1 <- calc_combined_ipw(dat_exp = data_exp_ipw, dat_obs = data_obs_ipw, eta = c(1,1))$tau
out[b,] <- c(bias,eta_select, tau_eta,tau_0,tau_1)
}
return(out)
}
func()
n_boot <- 100
res <- matrix(NA,ncol = 6)
start <- Sys.time()
print(paste0("start of parallelisation :",Sys.time()))
results1 <- foreach(
i = 1:n_boot,
.combine = 'rbind',
.packages = c('caret','data.table','causl','MASS','doParallel')
) %dopar% {
.GlobalEnv$pars_obs <- pars_obs
.GlobalEnv$pars_exp <- pars_exp
x <- func()
return(x)
}
print(Sys.time() - start)
res <- as.data.table(results1)
colnames(res) <- c("bias","eta1","eta0","tau_eta","tau_0","tau_1")
res[, lapply(.SD, function(x){ sqrt(mean((x - 0.8)^2))}), .SDcols = c("tau_eta","tau_0","tau_1"),by = bias]
res[, lapply(.SD, mean), .SDcols = c("eta1","eta0"),by = bias]
remove.packages(ManyData)
remove.packages("ManyData")
remove.packages("ManyData")
