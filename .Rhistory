stop("par2 must be positive for t-copula")
timer <- Sys.time()
eta <- mm %*% beta
difft <- Sys.time() - timer
print(paste0("eta: ",difft))
v<-diff
timer <- Sys.time()
log_den <- dat_u <- matrix(NA, nrow(dat), nc)
for (i in which(family != 5)) {
tmp <- causl:::univarDens(dat[, i], eta[, i], phi = phi[i],
family = family[i])
log_den[, i] <- tmp$ld
dat_u[, i] <- tmp$u
}
difft <- Sys.time() - timer
print(paste0("univerdens: ",difft))
v <- cbind(v,diff)
timer <- Sys.time()
wh_trunc = 0
ncv <- length(inCop)
par <- vector(mode = "list", length = choose(ncv, 2))
for (i in seq_len(choose(ncv, 2))) {
if (fam_cop <= 2 || fam_cop == 11) {
par[[i]] <- pmin(pmax(2 * expit(eta[, i + nv]) -
1, -1 + 1e-10), 1 - 1e-10)
}
else if (fam_cop == 3) {
par[[i]] <- exp(eta[, i + nv])
}
else if (fam_cop == 4 || fam_cop == 6) {
par[[i]] <- exp(eta[, i + nv]) + 1
}
else if (fam_cop == 5) {
par[[i]] <- eta[, i + nv]
}
}
print(paste0("par: ",difft))
if (fam_cop != 11) {
if (ncv > 2 || fam_cop <= 2) {
Sigma <- rep(diag(ncv), length(par[[1]]))
dim(Sigma) <- c(ncv, ncv, length(par[[1]]))
k = 1
for (j in seq_len(ncv)[-1]) for (i in seq_len(j -
1)) {
Sigma[i, j, ] <- Sigma[j, i, ] <- par[[k]]
k <- k + 1
}
if (fam_cop == 1) {
cop <- causl:::dGaussCop(dat_u[, inCop, drop = FALSE],
Sigma = Sigma, log = TRUE, useC = useC)
}
else if (fam_cop == 2) {
cop <- causl:::dtCop(dat_u[, inCop, drop = FALSE], Sigma = Sigma,
df = par2, log = TRUE)
}
else stop("Only Gaussian and t-copulas implemented for more than two dimensions")
}
else if (nc == 2) {
cop <- log(VineCopula::BiCopPDF(dat_u[, 1], dat_u[,
2], family = fam_cop, par = par[[1]], par2 = par2))
}
else stop("should have that nc is an integer >= 2")
}
else {
cop <- log(causl::dfgmCopula(dat_u[, 1], dat_u[, 2],
alpha = par[[1]]))
}
out <- cop + rowSums(log_den)
v
}
v<- causl:::ll(data_exp[,c(1,2,6)],mm = mm_exp ,beta = msks2$beta_m,phi = msks2$phi_m,inCop = c(1,2,3),fam_cop = 1, family = list(1,1,1))
v<-llR(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,phi = msks2$phi_m,inCop = c(1,2),fam_cop = 1, family = list(1,1))
v
llR <- function (dat, mm, beta, phi, inCop, fam_cop = 1, family = rep(1,
nc), link, par2 = NULL, useC = TRUE)
{
if (missing(inCop))
inCop <- seq_along(dat)
if (missing(link)) {
fams <- causl:::familyVals[match(family, causl:::familyVals$val), 2]
link <- sapply(fams, function(x) causl:::linksList[[x]][1])
}
if (any(phi < 0))
return(-Inf)
nv <- length(phi)
nc <- ncol(dat)
if (length(family) != nc)
stop(paste0("family should have length ", nc))
else if (nv != nc)
stop(paste0("length of phi should equal number of columns in dat"))
if (fam_cop == 2 && any(par2 <= 0))
stop("par2 must be positive for t-copula")
timer <- Sys.time()
eta <- mm %*% beta
difft <- Sys.time() - timer
print(paste0("eta: ",difft))
v<-difft
timer <- Sys.time()
log_den <- dat_u <- matrix(NA, nrow(dat), nc)
for (i in which(family != 5)) {
tmp <- causl:::univarDens(dat[, i], eta[, i], phi = phi[i],
family = family[i])
log_den[, i] <- tmp$ld
dat_u[, i] <- tmp$u
}
difft <- Sys.time() - timer
print(paste0("univerdens: ",difft))
v <- cbind(v,difft)
timer <- Sys.time()
wh_trunc = 0
ncv <- length(inCop)
par <- vector(mode = "list", length = choose(ncv, 2))
for (i in seq_len(choose(ncv, 2))) {
if (fam_cop <= 2 || fam_cop == 11) {
par[[i]] <- pmin(pmax(2 * expit(eta[, i + nv]) -
1, -1 + 1e-10), 1 - 1e-10)
}
else if (fam_cop == 3) {
par[[i]] <- exp(eta[, i + nv])
}
else if (fam_cop == 4 || fam_cop == 6) {
par[[i]] <- exp(eta[, i + nv]) + 1
}
else if (fam_cop == 5) {
par[[i]] <- eta[, i + nv]
}
}
difft <- Sys.time() - timer
print(paste0("par: ",difft))
v <- cbind(v,difft)
if (fam_cop != 11) {
if (ncv > 2 || fam_cop <= 2) {
timer <- Sys.time()
Sigma <- rep(diag(ncv), length(par[[1]]))
dim(Sigma) <- c(ncv, ncv, length(par[[1]]))
difft <- Sys.time() - timer
print(paste0("sigma: ",difft))
v <- cbind(v,difft)
k = 1
for (j in seq_len(ncv)[-1]) for (i in seq_len(j -
1)) {
Sigma[i, j, ] <- Sigma[j, i, ] <- par[[k]]
k <- k + 1
}
if (fam_cop == 1) {
timer <- Sys.time()
cop <- causl:::dGaussCop(dat_u[, inCop, drop = FALSE],
Sigma = Sigma, log = TRUE, useC = useC)
difft <- Sys.time() - timer
print(paste0("dGaussCop: ",difft))
v <- cbind(v,difft)
}
else if (fam_cop == 2) {
cop <- causl:::dtCop(dat_u[, inCop, drop = FALSE], Sigma = Sigma,
df = par2, log = TRUE)
}
else stop("Only Gaussian and t-copulas implemented for more than two dimensions")
}
else if (nc == 2) {
cop <- log(VineCopula::BiCopPDF(dat_u[, 1], dat_u[,
2], family = fam_cop, par = par[[1]], par2 = par2))
}
else stop("should have that nc is an integer >= 2")
}
else {
cop <- log(causl::dfgmCopula(dat_u[, 1], dat_u[, 2],
alpha = par[[1]]))
}
timer <- Sys.time()
out <- cop + rowSums(log_den)
difft <- Sys.time() - timer
print(paste0("summing: ",difft))
v <- cbind(v,difft)
v
}
v<-llR(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,phi = msks2$phi_m,inCop = c(1,2),fam_cop = 1, family = list(1,1))
v
t1<-Sys.time()
v<-llR(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,phi = msks2$phi_m,inCop = c(1,2),fam_cop = 1, family = list(1,1))
Sys.time()-t1
llC(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,msks2$phi_m,c(1,2))
clock
microbenchmark(
"C" = (llC_par <- llC(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,msks2$phi_m,c(1,2))),
"R" = (targ<-causl:::ll(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,phi = msks2$phi_m,inCop = c(1,2),fam_cop = 1, family = list(1,1)))
)
v<-llR(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,phi = msks2$phi_m,inCop = c(1,2),fam_cop = 1, family = list(1,1))
library(ManyData)
library(data.table)
library(causl)
library(microbenchmark)
# functions ---------------------------------------------------------------
masks<-function(formulas, family = rep(1, nc), wh, LHS)
{
if (is.list(family)) {
ncop <- lengths(family[length(family)])
family <- unlist(family[-length(family)])
}
formulas <- unlist(formulas)
nc <- length(formulas) + ncop - 1
beta_m <- matrix(0, nrow = max(unlist(wh)), ncol = nc)
phi_m <- numeric(length(family))
for (i in seq_along(phi_m)) {
if (family[i] >= 1 && family[i] <= 3) {
phi_m[i] <- 1
}
beta_m[wh[[i]], i] <- 1
}
cp <- length(phi_m) +1
for (i in seq_len(ncop)){
beta_m[wh[[cp]], length(phi_m) + i] <- 1
}
return(list(beta_m = beta_m, phi_m = phi_m))
}
llR <- function (dat, mm, beta, phi, inCop, fam_cop = 1, family = rep(1,
nc), link, par2 = NULL, useC = TRUE)
{
if (missing(inCop))
inCop <- seq_along(dat)
if (missing(link)) {
fams <- causl:::familyVals[match(family, causl:::familyVals$val), 2]
link <- sapply(fams, function(x) causl:::linksList[[x]][1])
}
if (any(phi < 0))
return(-Inf)
nv <- length(phi)
nc <- ncol(dat)
if (length(family) != nc)
stop(paste0("family should have length ", nc))
else if (nv != nc)
stop(paste0("length of phi should equal number of columns in dat"))
if (fam_cop == 2 && any(par2 <= 0))
stop("par2 must be positive for t-copula")
timer <- Sys.time()
eta <- mm %*% beta
difft <- Sys.time() - timer
print(paste0("eta: ",difft))
v<-difft*1000
timer <- Sys.time()
log_den <- dat_u <- matrix(NA, nrow(dat), nc)
for (i in which(family != 5)) {
tmp <- causl:::univarDens(dat[, i], eta[, i], phi = phi[i],
family = family[i])
log_den[, i] <- tmp$ld
dat_u[, i] <- tmp$u
}
difft <- Sys.time() - timer
print(paste0("univerdens: ",difft))
v <- cbind(v,difft*1000)
timer <- Sys.time()
wh_trunc = 0
ncv <- length(inCop)
par <- vector(mode = "list", length = choose(ncv, 2))
for (i in seq_len(choose(ncv, 2))) {
if (fam_cop <= 2 || fam_cop == 11) {
par[[i]] <- pmin(pmax(2 * expit(eta[, i + nv]) -
1, -1 + 1e-10), 1 - 1e-10)
}
else if (fam_cop == 3) {
par[[i]] <- exp(eta[, i + nv])
}
else if (fam_cop == 4 || fam_cop == 6) {
par[[i]] <- exp(eta[, i + nv]) + 1
}
else if (fam_cop == 5) {
par[[i]] <- eta[, i + nv]
}
}
difft <- Sys.time() - timer
print(paste0("par: ",difft))
v <- cbind(v,difft*1000)
if (fam_cop != 11) {
if (ncv > 2 || fam_cop <= 2) {
timer <- Sys.time()
Sigma <- rep(diag(ncv), length(par[[1]]))
dim(Sigma) <- c(ncv, ncv, length(par[[1]]))
difft <- Sys.time() - timer
print(paste0("sigma: ",difft))
v <- cbind(v,difft*1000)
k = 1
for (j in seq_len(ncv)[-1]) for (i in seq_len(j -
1)) {
Sigma[i, j, ] <- Sigma[j, i, ] <- par[[k]]
k <- k + 1
}
if (fam_cop == 1) {
timer <- Sys.time()
cop <- causl:::dGaussCop(dat_u[, inCop, drop = FALSE],
Sigma = Sigma, log = TRUE, useC = useC)
difft <- Sys.time() - timer
print(paste0("dGaussCop: ",difft))
v <- cbind(v,difft*1000)
}
else if (fam_cop == 2) {
cop <- causl:::dtCop(dat_u[, inCop, drop = FALSE], Sigma = Sigma,
df = par2, log = TRUE)
}
else stop("Only Gaussian and t-copulas implemented for more than two dimensions")
}
else if (nc == 2) {
cop <- log(VineCopula::BiCopPDF(dat_u[, 1], dat_u[,
2], family = fam_cop, par = par[[1]], par2 = par2))
}
else stop("should have that nc is an integer >= 2")
}
else {
cop <- log(causl::dfgmCopula(dat_u[, 1], dat_u[, 2],
alpha = par[[1]]))
}
timer <- Sys.time()
out <- cop + rowSums(log_den)
difft <- Sys.time() - timer
print(paste0("summing: ",difft*1000))
v <- cbind(v,difft)
v
}
options(sec.digit = 6)
forms_exp <- list(Z ~ C1*C2,
list(X ~ C1*C2, C1~ 1, C2 ~ 1),
Y ~ X*C1*C2,
~ X*C1*C2  #copula
)
# parameters
pars_exp <- list(C1 = list(beta = 0.5),
C2 = list(beta = 2,phi = 1),
Z = list(beta = c(0.2,0.6,0.9,0.3),phi = 1),
X = list(beta = c(0.3,0.8,0.2,0.1)),
Y = list(beta = c(0.6,0.8 ,0.2,0.3,0,0,0,0),phi = 1),
cop = list(beta = matrix(c(1,0,0,0,0,0,0,0),nrow = 8)))
data_exp <- setDT(causalSamp(10000,formulas = forms_exp, pars = pars_exp, family = list(1,c(5,5,1),1,1)))
## get param masks
forms2_exp <- causl:::tidy_formulas(forms_exp[-2], kwd = "cop")
full_form_exp <- causl:::merge_formulas(forms2_exp)
wh_exp <- full_form_exp$wh
# LHS <- lhs(forms2[-length(forms2)])
msks_exp <- masks(forms_exp[-2],family = list(1,1,1),wh_exp)
## get model matrix
mm_exp <- model.matrix(full_form_exp$formula, data = data_exp)
theta_exp <- causl:::theta(pars = pars_exp, formulas = forms_exp[-2], full_form_exp, kwd = "cop")
msks2 <- copy(msks_exp)
np <- sum(msks2$beta_m > 0)
msks2$beta_m[msks_exp$beta_m > 0] <- theta_exp[seq_len(np)]
msks2$phi_m[msks_exp$phi_m > 0] <- theta_exp[-seq_len(np)]
llC(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,msks2$phi_m,c(1,2))
clock
library(RcppClock)
clock
data_exp <- as.data.frame(data_exp)
t1<-Sys.time()
v<-llR(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,phi = msks2$phi_m,inCop = c(1,2),fam_cop = 1, family = list(1,1))
Sys.time()-t1
pars_exp <- list(C1 = list(beta = 0.5),
C2 = list(beta = 2,phi = 1),
Z = list(beta = c(0.2,0.6,0.9,0.3),phi = 1),
X = list(beta = c(0.3,0.8,0.2,0.1)),
Y = list(beta = c(0.6,0.8 ,0.2,0.3,0,0,0,0),phi = 1),
cop = list(beta = matrix(c(1,0,0,0,0,0,0,0),nrow = 8)))
data_exp <- setDT(causalSamp(50000,formulas = forms_exp, pars = pars_exp, family = list(1,c(5,5,1),1,1)))
## get param masks
forms2_exp <- causl:::tidy_formulas(forms_exp[-2], kwd = "cop")
full_form_exp <- causl:::merge_formulas(forms2_exp)
wh_exp <- full_form_exp$wh
# LHS <- lhs(forms2[-length(forms2)])
msks_exp <- masks(forms_exp[-2],family = list(1,1,1),wh_exp)
## get model matrix
mm_exp <- model.matrix(full_form_exp$formula, data = data_exp)
theta_exp <- causl:::theta(pars = pars_exp, formulas = forms_exp[-2], full_form_exp, kwd = "cop")
msks2 <- copy(msks_exp)
np <- sum(msks2$beta_m > 0)
msks2$beta_m[msks_exp$beta_m > 0] <- theta_exp[seq_len(np)]
msks2$phi_m[msks_exp$phi_m > 0] <- theta_exp[-seq_len(np)]
out <- llC(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,msks2$phi_m,c(1,2))
clock
data_exp <- as.data.frame(data_exp)
t1<-Sys.time()
v<-llR(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,phi = msks2$phi_m,inCop = c(1,2),fam_cop = 1, family = list(1,1))
Sys.time()-t1
v
sum(v)
microbenchmark(
"C" = (llC_par <- llC(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,msks2$phi_m,c(1,2))),
"R" = (targ<-causl:::ll(data_exp[,c(1,5)],mm = mm_exp ,beta = msks2$beta_m,phi = msks2$phi_m,inCop = c(1,2),fam_cop = 1, family = list(1,1)))
)
sourceCpp("src/test.cpp")
library(Rcpp)
sourceCpp("src/test.cpp")
sourceCpp("src/test.cpp")
sourceCpp("src/test.cpp")
sourceCpp("src/test.cpp")
data = matrix(rnorm(300),nrow = 100)
sourceCpp("src/test.cpp")
qnormC2(data)
data = matrix(runif(300),nrow = 100)
qnormC2(data)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data))
data = matrix(runif(30000),nrow = 10000)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data))
sourceCpp("src/test.cpp")
sourceCpp("src/test.cpp")
qnormC2(data)
ManyData:::qnormC(data)
sourceCpp("src/test.cpp")
qnormC2(data)
sourceCpp("src/test.cpp")
qnormC2(data)
sourceCpp("src/test.cpp")
sourceCpp("src/test.cpp")
sourceCpp("src/test.cpp")
qnormC2(data)
data = matrix(runif(30),nrow = 10)
qnormC2(data)
ManyData:::qnormC(data)
data
sourceCpp("src/test.cpp")
qnormC2(data)
data = matrix(runif(30),nrow = 10)
qnormC2(data)
ManyData:::qnormC(data)
sourceCpp("src/test.cpp")
data = matrix(runif(30),nrow = 10)
qnormC2(data)
ManyData:::qnormC(data)
sourceCpp("src/test.cpp")
data = matrix(runif(30),nrow = 10)
qnormC2(data)
ManyData:::qnormC(data)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data))
data = matrix(runif(3000),nrow = 10)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data))
data = matrix(runif(3000),nrow = 1000)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data))
data = matrix(runif(30000),nrow = 10000)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data))
sourceCpp("src/test.cpp")
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data),
qnormC3(data))
data = matrix(runif(30000),nrow = 10000)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data),
qnormC3(data))
data = matrix(runif(30000),nrow = 10000)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data),
qnormC3(data))
qnormC2(data)
data = matrix(runif(30000),nrow = 10000)
qnormC2(data)
source("~/.active-rstudio-document", echo=TRUE)
ManyData:::qnormC(data)
qnormC3(data)
qnormC3(data)
data = matrix(runif(30000),nrow = 10000)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data),
qnormC3(data))
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data))
qnormC2(data)
data = matrix(runif(30000),nrow = 10000)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data))
data = matrix(runif(30000),nrow = 10000)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data),
qnormC3(data))
data = matrix(runif(30000),nrow = 10000)
qnormC2(data)
ManyData:::qnormC(data)
ManyData:::qnormC(data)
?microbenchmark
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data),
qnormC3(data),times = 1L)
sourceCpp("src/test.cpp")
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data),
qnormC4(data),
qnormC3(data),times = 1L)
r
data = matrix(runif(30000),nrow = 10000)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data),
qnormC4(data),
qnormC3(data),times = 1L)
data = matrix(runif(30000),nrow = 10000)
microbenchmark(
qnormC2(data),
ManyData:::qnormC(data),
qnormC4(data))
