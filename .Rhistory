sigma = sigma,
inCop = c(1,2),
dat_exp = data_exp[,c("Z","Y")],
theta_exp  = theta_exp,
mm_exp = mm_exp,
mask_exp = msks_exp,
dat_obs = data_obs[,c("Z","Y")],
theta_obs  = theta_obs,
mm_obs = mm_obs,
mask_obs = msks_obs,
p_mu = MLE_exp,
p_sigma = 0.2*diag(12),
eta = eta)
Sys.time() - start
chain_rtnd <- chain[-seq(1:1000),]
chain_rtnd <- data.frame(chain_rtnd)
sapply(chain_rtnd, function(x) length(unique(x))/nrow(chain_rtnd) )
#' @param startval Initial values..
#' @param iterations Number of MCMC iterations..
#' @param dat_obs Observational dataset.
#' @param dat_exp Experimental dataset.
#' @param eta Learning rate on the observational data..
#' @return A table of posterior samples.
#' @examples theta_sim_eta05 <- run_MH_MCMC(c(1,0.5), 1000, dat_obs = dat_obs, dat_exp = dat_exp, eta = 0.5)
#' @export
#'
#'
run_MH_MCMC <- function(startval, iterations, dat_obs, dat_exp,
msks_obs,theta_obs,
msks_exp,theta_exp,
p_mu, p_sig,eta){
# Prepare input for the observational study
## get param masks
# forms2_obs <- causl:::tidy_formulas(forms_obs[-2], kwd = "cop")
# full_form_obs <- causl:::merge_formulas(forms2_obs)
# wh_obs <- full_form_obs$wh
# # LHS <- lhs(forms2[-length(forms2)])
# msks_obs <- masks(forms_obs[-2],family = list(1,1,1),wh_obs)
## get model matrix
mm_obs <- model.matrix(full_form_obs$formula, data = dat_obs)
# theta_obs <- causl:::theta(pars = pars_obs, formulas = forms_obs[-2], full_form_obs, kwd = "cop")
# Prepare input for the experimental study
## get param masks
# forms2_exp <- causl:::tidy_formulas(forms_exp[-2], kwd = "cop")
# full_form_exp <- causl:::merge_formulas(forms2_exp)
# wh_exp <- full_form_exp$wh
# # LHS <- lhs(forms2[-length(forms2)])
# msks_exp <- masks(forms_exp[-2],family = list(1,1,1),wh_exp)
## get model matrix
mm_exp <- model.matrix(full_form_exp$formula, data = dat_exp)
# theta_exp <- causl:::theta(pars = pars_exp, formulas = forms_exp[-2], full_form_exp, kwd = "cop")
# covariance matrix for proposal function
FI_exp <- ManyData:::ApproxFI_single(msks_exp, theta_exp, mm_exp, data_exp,  delta = 1e-4)
FI_obs <- ManyData:::ApproxFI_single(msks_obs, theta_obs, mm_obs, data_obs, delta = 1e-4)
# if (eta > 0.1){
#
# sigma <- 2 * solve(eta *FI_obs)
#
# } else{
#   FI_exp <- ApproxFI(masks = msks_exp, theta = theta_exp, mm = mm_exp, dat = dat_exp, delta = 1e-4)
#   sigma <- 2 * solve(FI_exp+eta *FI_obs)
# }
sigma <- 400* 1/(10*FI_exp+eta *FI_obs)
# chain <- matrix(rep(0,iterations*2), ncol = 2)
# chain[1,] <- startval
#
# for (i in 2:iterations) {
#
#   currentval = chain[i - 1,]
#   Y = proposalfunction(currentval, sigma)
#
#   alpha = exp(posterior(Y, dat_obs = dat_obs, theta_obs = theta_obs, mm_obs = mm_obs, mask_obs = msks_obs,
#                         dat_exp = dat_exp, theta_exp = theta_exp,mm_exp = mm_exp ,mask_exp = msks_exp,
#                         eta)
#               - posterior(currentval, dat_obs = dat_obs,theta_obs = theta_obs,  mm_obs = mm_obs, mask_obs = msks_obs,
#                           dat_exp = dat_exp, theta_exp = theta_exp,mm_exp = mm_exp ,mask_exp = msks_exp,
#                           eta))
#
#   if (runif(1) < alpha) {
#     chain[i,] = Y
#   }else{
#     chain[i,] = currentval
#   }
#
#   # printCount(i)
# }
chain <- ManyData:::MCMCloop_C(n_iter = iterations,
init_val = startval,
# init_val = c(0,0,0,0),
sigma = sigma,
inCop = c(1,2),
dat_exp = dat_exp[,c("Z","Y")],
theta_exp  = theta_exp,
mm_exp = mm_exp,
mask_exp = msks_exp,
dat_obs = dat_obs[,c("Z","Y")],
theta_obs  = theta_obs,
mm_obs = mm_obs,
mask_obs = msks_obs,
p_mu = p_mu,
p_sigma = p_sig,
eta = eta)
return(chain)
}
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),][seq(1:nrow(theta_sim_raw),5),]
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),][seq(1,nrow(theta_sim_raw),5),]
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),][seq(1,nrow(theta_sim_rtnd),5),]
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),][seq(1:nrow(theta_sim_raw)-500,5)]
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),][seq(1,nrow(theta_sim_raw)-500,5)]
AR <- length(unique(theta_sim_rtnd[,3]))/length(theta_sim_rtnd)
theta_sim_rtnd
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),]
theta_sim_rtnd[,3]
AR <- nrow(unique(theta_sim_rtnd[,3]))/nrow(theta_sim_rtnd)
AR
nrow(unique(theta_sim_rtnd[,3]))
AR <- length(unique(theta_sim_rtnd[,3]))/nrow(theta_sim_rtnd)
AR
sapply(chain_rtnd, function(x) length(unique(x))/nrow(chain_rtnd) )
sapply(theta_sim_rtnd, function(x) length(unique(x))/nrow(theta_sim_rtnd) )
theta_sim_rtnd2 <- as.data.frame(theta_sim_rtnd)
sapply(theta_sim_rtnd2, function(x) length(unique(x))/nrow(theta_sim_rtnd2) )
AR <- length(unique(theta_sim_rtnd[,3]))/nrow(theta_sim_rtnd)
AR <- mean(length(unique(theta_sim_rtnd[,3])),
length(unique(theta_sim_rtnd[,4])),
length(unique(theta_sim_rtnd[,5])),
length(unique(theta_sim_rtnd[,6])))/nrow(theta_sim_rtnd)
AR
AR <- mean(length(unique(theta_sim_rtnd[,3])),
length(unique(theta_sim_rtnd[,4])),
length(unique(theta_sim_rtnd[,5])),
length(unique(theta_sim_rtnd[,6])))/nrow(theta_sim_rtnd)
AR
length(unique(theta_sim_rtnd[,4]))
length(unique(theta_sim_rtnd[,5]))
mean(length(unique(theta_sim_rtnd[,3])),
length(unique(theta_sim_rtnd[,4])),
length(unique(theta_sim_rtnd[,5])),
length(unique(theta_sim_rtnd[,6])))
1847/nrow(theta_sim_rtnd)
nrow(theta_sim_rtnd)
1847/4500
sapply(theta_sim_rtnd2, function(x) length(unique(x))/nrow(theta_sim_rtnd2) )
length(unique(theta_sim_rtnd[,3]))/4500
length(unique(theta_sim_rtnd[,3]))
mean(1,2,3,4)
mean(c(1,2,3,4))
AR <- mean(c(length(unique(theta_sim_rtnd[,3])),
length(unique(theta_sim_rtnd[,4])),
length(unique(theta_sim_rtnd[,5])),
length(unique(theta_sim_rtnd[,6]))))/nrow(theta_sim_rtnd)
AR
length(unique(theta_sim_rtnd[,c(3,4,5,6)]))/nrow(theta_sim_rtnd)
nrow(unique(theta_sim_rtnd[,c(3,4,5,6)]))/nrow(theta_sim_rtnd)
theta_sim_rtnd <- theta_sim_rtnd[seq(1:theta_sim_rtnd,5)]
effectiveSize(theta_sim_raw)
ESS <- mean(effectiveSize(theta_sim_raw)[c(3,4,5,6)])
ESS <- mean(effectiveSize(theta_sim_raw)[c(3,4,5,6)])
ESS
colMeans(theta_sim_rtnd[,c(3,4,5,6)])
colMeans(theta_sim_rtnd[,c(3,4,5,6)])
colMeans(theta_sim_rtnd)[c(3,4,5,6)]
colMeans(theta_sim_rtnd)
View(theta_sim_raw)
theta_sim_rtnd <- theta_sim_rtnd[seq(1:theta_sim_rtnd,5),]
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),]
theta_sim_rtnd <- theta_sim_rtnd[seq(1:theta_sim_rtnd,5),]
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),]
theta_sim_rtnd <- theta_sim_rtnd[seq(1:theta_sim_rtnd,5),]
theta_sim_rtnd <- theta_sim_rtnd[seq(1,theta_sim_rtnd,5),]
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),]
theta_sim_rtnd <- theta_sim_rtnd[seq(1,theta_sim_rtnd,5),]
theta_sim_rtnd <- theta_sim_rtnd[seq(1,nrows(theta_sim_rtnd),5),]
theta_sim_rtnd <- theta_sim_rtnd[seq(1,nrow(theta_sim_rtnd),5),]
ESS <- mean(effectiveSize(theta_sim_raw)[c(3,4,5,6)])
ESS
colMeans(theta_sim_rtnd)
colMeans(theta_sim_rtnd[,c(3,4,5,6)])
colMeans(theta_sim_rtnd[,c(5,6)])
func <- function(){
data_exp_b <- causalSamp(250,formulas = forms_exp,pars = pars_exp, family = list(1,c(5,5),1,1))
data_obs_b <- causalSamp(2500,formulas = forms_obs,pars = pars_obs, family = list(1,c(5,5),1,1))
# use the MLE fit in the experimental data to initialise the MCMC chain
fit_exp<-fitCausal(dat = data_exp_b,
formulas = forms_exp[-2],
family = c(1,1,1)
)
MLE_exp <- c(fit_exp$pars$Z$beta,fit_exp$pars$Y$beta[1],fit_exp$pars$Y$beta[3],fit_exp$pars$Y$beta[2],fit_exp$pars$Y$beta[4],
fit_exp$pars$cop$beta[1], fit_exp$pars$cop$beta[3],fit_exp$pars$cop$beta[2],fit_exp$pars$cop$beta[4],
fit_exp$pars$Z$phi,fit_exp$pars$Y$phi
)
result<-matrix(0,1,7)
for (eta in eta_list){
theta_sim_raw <- run_MH_MCMC(MLE_exp, 10000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,MLE_exp, 0.2*diag(12),eta)
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),]
AR <- mean(c(length(unique(theta_sim_rtnd[,3])),
length(unique(theta_sim_rtnd[,4])),
length(unique(theta_sim_rtnd[,5])),
length(unique(theta_sim_rtnd[,6]))))/nrow(theta_sim_rtnd)
theta_sim_rtnd <- theta_sim_rtnd[seq(1,nrow(theta_sim_rtnd),5),]
ESS <- mean(effectiveSize(theta_sim_raw)[c(3,4,5,6)])
lst <- list()
for (i in 1:nrow(theta_sim_rtnd)) {
# theta2 <- copy(theta_exp)
theta2 <- theta_sim_rtnd[i,]
msks2 <- copy(msks_exp)
np <- sum(msks2$beta_m > 0)
msks2$beta_m[msks_exp$beta_m > 0] <- theta2[seq_len(np)]
msks2$phi_m[msks_exp$phi_m > 0] <- theta2[-seq_len(np)]
mm_exp <- model.matrix(full_form_exp$formula, data = data_exp_b)
ll_i <- ManyData:::llC(data_exp_b[,c("Z","Y")],mm_exp,msks2$beta_m, phi = msks2$phi_m,inCop = c(1,2))
lst[[i]] <- as.vector(ll_i)
# print(i)
}
mtrx <- do.call(rbind, lst)
waic_eta <- waic(mtrx)
# EDIT THIS
result<-rbind(result,c(eta,AR,ESS, colMeans(theta_sim_rtnd[,c(3,4,5,6)]),mean(data_exp_b$C1),waic_eta$estimates[1]))
}
return(result[-1,])
}
start <- Sys.time()
eta_list <- c(0.4)
func()
Sys.time() - start
func <- function(){
data_exp_b <- causalSamp(250,formulas = forms_exp,pars = pars_exp, family = list(1,c(5,5),1,1))
data_obs_b <- causalSamp(2500,formulas = forms_obs,pars = pars_obs, family = list(1,c(5,5),1,1))
# use the MLE fit in the experimental data to initialise the MCMC chain
fit_exp<-fitCausal(dat = data_exp_b,
formulas = forms_exp[-2],
family = c(1,1,1)
)
MLE_exp <- c(fit_exp$pars$Z$beta,fit_exp$pars$Y$beta[1],fit_exp$pars$Y$beta[3],fit_exp$pars$Y$beta[2],fit_exp$pars$Y$beta[4],
fit_exp$pars$cop$beta[1], fit_exp$pars$cop$beta[3],fit_exp$pars$cop$beta[2],fit_exp$pars$cop$beta[4],
fit_exp$pars$Z$phi,fit_exp$pars$Y$phi
)
result<-matrix(0,1,9)
for (eta in eta_list){
theta_sim_raw <- run_MH_MCMC(MLE_exp, 10000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,MLE_exp, 0.2*diag(12),eta)
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),]
AR <- mean(c(length(unique(theta_sim_rtnd[,3])),
length(unique(theta_sim_rtnd[,4])),
length(unique(theta_sim_rtnd[,5])),
length(unique(theta_sim_rtnd[,6]))))/nrow(theta_sim_rtnd)
theta_sim_rtnd <- theta_sim_rtnd[seq(1,nrow(theta_sim_rtnd),5),]
ESS <- mean(effectiveSize(theta_sim_raw)[c(3,4,5,6)])
lst <- list()
for (i in 1:nrow(theta_sim_rtnd)) {
# theta2 <- copy(theta_exp)
theta2 <- theta_sim_rtnd[i,]
msks2 <- copy(msks_exp)
np <- sum(msks2$beta_m > 0)
msks2$beta_m[msks_exp$beta_m > 0] <- theta2[seq_len(np)]
msks2$phi_m[msks_exp$phi_m > 0] <- theta2[-seq_len(np)]
mm_exp <- model.matrix(full_form_exp$formula, data = data_exp_b)
ll_i <- ManyData:::llC(data_exp_b[,c("Z","Y")],mm_exp,msks2$beta_m, phi = msks2$phi_m,inCop = c(1,2))
lst[[i]] <- as.vector(ll_i)
# print(i)
}
mtrx <- do.call(rbind, lst)
waic_eta <- waic(mtrx)
# EDIT THIS
result<-rbind(result,c(eta,AR,ESS, colMeans(theta_sim_rtnd[,c(3,4,5,6)]),mean(data_exp_b$C1),waic_eta$estimates[1]))
}
return(result[-1,])
}
start <- Sys.time()
eta_list <- c(0,0.4,0.8,1)
func()
Sys.time() - start
# install.packages("parallel")
library(parallel)
library(foreach)
library(doSNOW)
# Parallelisation ---------------------------------------------------------
parallel::detectCores()
# [1] 12
n.cores <- parallel::detectCores() - 1
my.cluster <- parallel::makeCluster(
n.cores,
type = "PSOCK"
)
print(my.cluster)
#register it to be used by %dopar%
doParallel::registerDoParallel(cl = my.cluster)
#check if it is registered (optional)
foreach::getDoParRegistered()
registerDoSNOW(my.cluster)
# Read in simulated dataset -----------------------------------------------
# data_exp <- readRDS(file.path(data_dir,"/data_exp.rds"))
# data_obs <- readRDS(file.path(data_dir,"/data_obs.rds"))
# Loop --------------------------------------------------------------------
# Number of bootstrap samples
n_boot <- 2
# List of eta
eta_list <- c(seq(0,0.8,0.4),1)
# Function to evaluate
set.seed(111)
forms2_obs <- causl:::tidy_formulas(forms_obs[-2], kwd = "cop")
full_form_obs <- causl:::merge_formulas(forms2_obs)
wh_obs <- full_form_obs$wh
# LHS <- lhs(forms2[-length(forms2)])
msks_obs <- ManyData:::masks(forms_obs[-2],family = list(1,1,1),wh_obs)
theta_obs <- causl:::theta(pars = pars_obs, formulas = forms_obs[-2], full_form_obs, kwd = "cop")
forms2_exp <- causl:::tidy_formulas(forms_exp[-2], kwd = "cop")
full_form_exp <- causl:::merge_formulas(forms2_exp)
wh_exp <- full_form_exp$wh
# LHS <- lhs(forms2[-length(forms2)])
msks_exp <- ManyData:::masks(forms_exp[-2],family = list(1,1,1),wh_exp)
theta_exp <- causl:::theta(pars = pars_exp, formulas = forms_exp[-2], full_form_exp, kwd = "cop")
func <- function(){
data_exp_b <- causalSamp(250,formulas = forms_exp,pars = pars_exp, family = list(1,c(5,5),1,1))
data_obs_b <- causalSamp(2500,formulas = forms_obs,pars = pars_obs, family = list(1,c(5,5),1,1))
# use the MLE fit in the experimental data to initialise the MCMC chain
fit_exp<-fitCausal(dat = data_exp_b,
formulas = forms_exp[-2],
family = c(1,1,1)
)
MLE_exp <- c(fit_exp$pars$Z$beta,fit_exp$pars$Y$beta[1],fit_exp$pars$Y$beta[3],fit_exp$pars$Y$beta[2],fit_exp$pars$Y$beta[4],
fit_exp$pars$cop$beta[1], fit_exp$pars$cop$beta[3],fit_exp$pars$cop$beta[2],fit_exp$pars$cop$beta[4],
fit_exp$pars$Z$phi,fit_exp$pars$Y$phi
)
result<-matrix(0,1,9)
for (eta in eta_list){
theta_sim_raw <- run_MH_MCMC(MLE_exp, 10000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,MLE_exp, 0.2*diag(12),eta)
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),]
AR <- mean(c(length(unique(theta_sim_rtnd[,3])),
length(unique(theta_sim_rtnd[,4])),
length(unique(theta_sim_rtnd[,5])),
length(unique(theta_sim_rtnd[,6]))))/nrow(theta_sim_rtnd)
theta_sim_rtnd <- theta_sim_rtnd[seq(1,nrow(theta_sim_rtnd),5),]
ESS <- mean(effectiveSize(theta_sim_raw)[c(3,4,5,6)])
lst <- list()
for (i in 1:nrow(theta_sim_rtnd)) {
# theta2 <- copy(theta_exp)
theta2 <- theta_sim_rtnd[i,]
msks2 <- copy(msks_exp)
np <- sum(msks2$beta_m > 0)
msks2$beta_m[msks_exp$beta_m > 0] <- theta2[seq_len(np)]
msks2$phi_m[msks_exp$phi_m > 0] <- theta2[-seq_len(np)]
mm_exp <- model.matrix(full_form_exp$formula, data = data_exp_b)
ll_i <- ManyData:::llC(data_exp_b[,c("Z","Y")],mm_exp,msks2$beta_m, phi = msks2$phi_m,inCop = c(1,2))
lst[[i]] <- as.vector(ll_i)
# print(i)
}
mtrx <- do.call(rbind, lst)
waic_eta <- waic(mtrx)
# EDIT THIS
result<-rbind(result,c(eta,AR,ESS, colMeans(theta_sim_rtnd[,c(3,4,5,6)]),mean(data_exp_b$C1),waic_eta$estimates[1]))
}
return(result[-1,])
}
start <- Sys.time()
pb <- txtProgressBar(max = n_boot, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
results <- foreach(
i = 1:n_boot,
.combine = 'rbind',
.packages = c('mvtnorm','data.table','coda','ManyData','loo','causl'),
.options.snow = opts
) %dopar% {
# .GlobalEnv$forms_obs <- forms_obs
.GlobalEnv$full_form_obs <- full_form_obs
# .GlobalEnv$msks_obs <- msks_obs
# .GlobalEnv$masks <- masks
# .GlobalEnv$pars_obs <- pars_obs
# .GlobalEnv$forms_exp <- forms_exp
.GlobalEnv$full_form_exp <- full_form_exp
# .GlobalEnv$MLE_exp <- MLE_exp
x<-func()
# x<- summary(rnorm(1e7))[3]
return(x)
}
n_boot <- 11
# List of eta
eta_list <- c(seq(0,0.8,0.4),1)
# Function to evaluate
set.seed(111)
forms2_obs <- causl:::tidy_formulas(forms_obs[-2], kwd = "cop")
full_form_obs <- causl:::merge_formulas(forms2_obs)
wh_obs <- full_form_obs$wh
# LHS <- lhs(forms2[-length(forms2)])
msks_obs <- ManyData:::masks(forms_obs[-2],family = list(1,1,1),wh_obs)
theta_obs <- causl:::theta(pars = pars_obs, formulas = forms_obs[-2], full_form_obs, kwd = "cop")
forms2_exp <- causl:::tidy_formulas(forms_exp[-2], kwd = "cop")
full_form_exp <- causl:::merge_formulas(forms2_exp)
wh_exp <- full_form_exp$wh
# LHS <- lhs(forms2[-length(forms2)])
msks_exp <- ManyData:::masks(forms_exp[-2],family = list(1,1,1),wh_exp)
theta_exp <- causl:::theta(pars = pars_exp, formulas = forms_exp[-2], full_form_exp, kwd = "cop")
func <- function(){
data_exp_b <- causalSamp(250,formulas = forms_exp,pars = pars_exp, family = list(1,c(5,5),1,1))
data_obs_b <- causalSamp(2500,formulas = forms_obs,pars = pars_obs, family = list(1,c(5,5),1,1))
# use the MLE fit in the experimental data to initialise the MCMC chain
fit_exp<-fitCausal(dat = data_exp_b,
formulas = forms_exp[-2],
family = c(1,1,1)
)
MLE_exp <- c(fit_exp$pars$Z$beta,fit_exp$pars$Y$beta[1],fit_exp$pars$Y$beta[3],fit_exp$pars$Y$beta[2],fit_exp$pars$Y$beta[4],
fit_exp$pars$cop$beta[1], fit_exp$pars$cop$beta[3],fit_exp$pars$cop$beta[2],fit_exp$pars$cop$beta[4],
fit_exp$pars$Z$phi,fit_exp$pars$Y$phi
)
result<-matrix(0,1,9)
for (eta in eta_list){
theta_sim_raw <- run_MH_MCMC(MLE_exp, 10000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,MLE_exp, 0.2*diag(12),eta)
theta_sim_rtnd <- theta_sim_raw[-seq(1:500),]
AR <- mean(c(length(unique(theta_sim_rtnd[,3])),
length(unique(theta_sim_rtnd[,4])),
length(unique(theta_sim_rtnd[,5])),
length(unique(theta_sim_rtnd[,6]))))/nrow(theta_sim_rtnd)
theta_sim_rtnd <- theta_sim_rtnd[seq(1,nrow(theta_sim_rtnd),5),]
ESS <- mean(effectiveSize(theta_sim_raw)[c(3,4,5,6)])
lst <- list()
for (i in 1:nrow(theta_sim_rtnd)) {
# theta2 <- copy(theta_exp)
theta2 <- theta_sim_rtnd[i,]
msks2 <- copy(msks_exp)
np <- sum(msks2$beta_m > 0)
msks2$beta_m[msks_exp$beta_m > 0] <- theta2[seq_len(np)]
msks2$phi_m[msks_exp$phi_m > 0] <- theta2[-seq_len(np)]
mm_exp <- model.matrix(full_form_exp$formula, data = data_exp_b)
ll_i <- ManyData:::llC(data_exp_b[,c("Z","Y")],mm_exp,msks2$beta_m, phi = msks2$phi_m,inCop = c(1,2))
lst[[i]] <- as.vector(ll_i)
# print(i)
}
mtrx <- do.call(rbind, lst)
waic_eta <- waic(mtrx)
# EDIT THIS
result<-rbind(result,c(eta,AR,ESS, colMeans(theta_sim_rtnd[,c(3,4,5,6)]),mean(data_exp_b$C1),waic_eta$estimates[1]))
}
return(result[-1,])
}
start <- Sys.time()
pb <- txtProgressBar(max = n_boot, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
results <- foreach(
i = 1:n_boot,
.combine = 'rbind',
.packages = c('mvtnorm','data.table','coda','ManyData','loo','causl'),
.options.snow = opts
) %dopar% {
# .GlobalEnv$forms_obs <- forms_obs
.GlobalEnv$full_form_obs <- full_form_obs
# .GlobalEnv$msks_obs <- msks_obs
# .GlobalEnv$masks <- masks
# .GlobalEnv$pars_obs <- pars_obs
# .GlobalEnv$forms_exp <- forms_exp
.GlobalEnv$full_form_exp <- full_form_exp
# .GlobalEnv$MLE_exp <- MLE_exp
x<-func()
# x<- summary(rnorm(1e7))[3]
return(x)
}
results
colnames(results) <- c("eta","AR","ESS","beta_0","beta_2","beta_1","beta_3", "meanC1_exp","ELPD_waic")
summ<-results[,.(.N,beta_1 = mean(beta_1),
beta_1sd = sd(beta_1),
beta_3 = mean(beta_3),
beta_3sd = sd(beta_3),
ATE = mean(ATE),
ATE_sd = sd(ATE),
elpd = mean(ELPD_waic),
RMSE_beta1 = sqrt(mean((beta_1 - beta_1_true)^2)),
RMSE_beta3 = sqrt(mean((beta_3 - beta_3_true)^2)),
RMSE_ATE = sqrt(mean((ATE - (beta_1_true + beta_3_true *meanC1_exp ))^2))) ,eta]
results <- as.data.table(results)
colnames(results) <- c("eta","AR","ESS","beta_0","beta_2","beta_1","beta_3", "meanC1_exp","ELPD_waic")
beta_1_true <- 0.8
beta_3_true <- 0.3
results[,ATE:= beta_1 + beta_3 * meanC1_exp]
summ<-results[,.(.N,beta_1 = mean(beta_1),
beta_1sd = sd(beta_1),
beta_3 = mean(beta_3),
beta_3sd = sd(beta_3),
ATE = mean(ATE),
ATE_sd = sd(ATE),
elpd = mean(ELPD_waic),
RMSE_beta1 = sqrt(mean((beta_1 - beta_1_true)^2)),
RMSE_beta3 = sqrt(mean((beta_3 - beta_3_true)^2)),
RMSE_ATE = sqrt(mean((ATE - (beta_1_true + beta_3_true *meanC1_exp ))^2))) ,eta]
p1 <- ggplot(summ, aes(x = eta)) +
geom_line(aes(y = -elpd), color = "darkred", size = 1) +
ggtitle("Estimated ELPD")+
theme_bw()
p1
p2 <- ggplot(summ, aes(x = eta)) +
geom_line(aes(y = RMSE_beta1), color = "darkred", size = 1) +
ggtitle("RMSE beta1")+
theme_bw()
p2
p3 <- ggplot(summ, aes(x = eta)) +
geom_line(aes(y = RMSE_beta3), color = "darkred", size = 1) +
ggtitle("RMSE beta3")+
theme_bw()
p3
p4 <- ggplot(summ, aes(x = eta)) +
geom_line(aes(y = RMSE_ATE), color = "darkred", size = 1) +
ggtitle("RMSE ATE")+
theme_bw()
p4
grid.arrange(p1,p2,p3,p4,nrow = 2)
