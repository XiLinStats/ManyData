return(mse)
}
# initialising the list to pass to the apply functions
x.list <- sapply(1:10000, list)
system.time({
clusterExport(my.cluster, "Boston")
a <- parLapply(my.cluster, x.list, model.mse)})
func2 <- function(x){
return(median(rnorm(100)))
}
func2 <- function(x){
return(median(rnorm(100)))
}
system.time({
a <- parLapply(my.cluster, x.list, func2)})
a
func2 <- function(x){
data_exp_b <- causalSamp(250,formulas = forms_exp,pars = pars_exp, family = list(1,c(5,5),1,1))
data_obs_b <- causalSamp(2500,formulas = forms_obs,pars = pars_obs, family = list(1,c(5,5),1,1))
fit_exp <- fitCausal(dat = data_exp_b,
formulas = forms_exp[-2],
family = c(1,1,1))
MLE_exp<- fit_exp$pars$Y$beta
MLE_exp[c(2,3)] <- fit_exp$pars$Y$beta[c(3,2)]
return(MLE_exp)
}
a <- parLapply(my.cluster, x.list, func2)}
a <- parLapply(my.cluster, x.list, func2)
clusterExport(my.cluster, "causalSamp")
a <- parLapply(my.cluster, x.list, func2)
clusterExport(my.cluster, c("causalSamp","forms_exp","pars_exp",
a <- parLapply(my.cluster, x.list, func2)
clusterExport(my.cluster, c("causalSamp","forms_exp","pars_exp",
"forms_obs","pars_exp"))
a <- parLapply(my.cluster, x.list, func2)
clusterExport(my.cluster, c("causalSamp","forms_exp","pars_exp",
"forms_obs","pars_exp","func2"))
a <- parLapply(my.cluster, x.list, func2)
globalenv()
?globalenv
.GlobalEnv
all <- mget(ls(), envir = globalenv())
all
clusterExport(my.cluster, c(all))
print(as.list(.GlobalEnv))
X <- lsf.str()
as.vector(X) # just for printing purposes, you can use the vector in rm()
rm(list=X)
X <- lsf.str()
clusterExport(my.cluster, as.vector(X))
a <- parLapply(my.cluster, x.list, func2)
func2 <- function(x){
data_exp_b <- causalSamp(250,formulas = forms_exp,pars = pars_exp, family = list(1,c(5,5),1,1))
data_obs_b <- causalSamp(2500,formulas = forms_obs,pars = pars_obs, family = list(1,c(5,5),1,1))
fit_exp <- fitCausal(dat = data_exp_b,
formulas = forms_exp[-2],
family = c(1,1,1))
MLE_exp<- fit_exp$pars$Y$beta
MLE_exp[c(2,3)] <- fit_exp$pars$Y$beta[c(3,2)]
return(MLE_exp)
}
clusterExport(my.cluster, as.vector(X))
a <- parLapply(my.cluster, x.list, func2)
source(file.path(code_dir,"001_fit.R"))
source(file.path(code_dir,"002_initialize.R"))
sourceCpp(file.path(code_dir,"003_ll.cpp"))
source(file.path(code_dir,"004_sampledata.R"))
source(file.path(code_dir,"005_sampledata_func.R"))
source(file.path(code_dir,"006_sample_vinecop.R"))
source(file.path(code_dir,"007_utility.R"))
source(file.path(code_dir,"008_fisher_info.R"))
source(file.path(code_dir,"009_MCMC.R"))
source(file.path(code_dir,"copulas.R"))
X <- lsf.str()
as.vector(X) # just for printing purposes, you can use the vector in rm()
clusterExport(my.cluster, as.vector(X))
a <- parLapply(my.cluster, x.list, func2)
clusterExport(my.cluster, c(as.vector(X),"familyVals"))
a <- parLapply(my.cluster, x.list, func2)
clusterExport(my.cluster, c(as.vector(X),"familyVals","linksList"))
a <- parLapply(my.cluster, x.list, func2)
theta2_exp
forms2_exp <- tidy_formulas(forms_exp[-2], kwd = "cop")
full_form_exp <- merge_formulas(forms2_exp)
wh_exp <- full_form_exp$wh
# LHS <- lhs(forms2[-length(forms2)])
msks_exp <- masks(forms_exp[-2],family = list(1,1,1),wh_exp)
theta_exp <- theta(pars = pars_exp, formulas = forms_exp[-2], full_form_exp, kwd = "cop")
theta_exp
run_MH_MCMC_R <- function(startval, iterations, dat_obs, dat_exp,
msks_obs,theta_obs,
msks_exp,theta_exp,
p_mu, p_sigma,eta){
## get model matrix
mm_obs <- model.matrix(full_form_obs$formula, data = dat_obs)
## get model matrix
mm_exp <- model.matrix(full_form_exp$formula, data = dat_exp)
# covariance matrix for proposal function
FI_exp <- ApproxFI_all(masks = msks_exp, theta = theta_exp, mm = mm_exp, dat = dat_exp, delta = 1e-4)
FI_obs <- ApproxFI_all(masks = msks_obs, theta = theta_obs, mm = mm_obs, dat = dat_obs, delta = 1e-4)
# }
sigma <- 2 * solve(FI_exp + eta *FI_obs)
chain <- matrix(rep(0,iterations*4), ncol = 4)
chain[1,] <- startval
prev_postll <- posterior(startval, dat_obs = dat_obs, theta_obs = theta_obs, mm_obs = mm_obs, mask_obs = msks_obs,
dat_exp = dat_exp, theta_exp = theta_exp,mm_exp = mm_exp ,mask_exp = msks_exp,
eta, p_mu = p_mu, p_sigma = p_sigma)
prev_var <- startval
for (i in 2:iterations) {
Y = proposalfunction(prev_var, sigma)
curr_postll <- posterior(Y, dat_obs = dat_obs, theta_obs = theta_obs, mm_obs = mm_obs, mask_obs = msks_obs,
dat_exp = dat_exp, theta_exp = theta_exp,mm_exp = mm_exp ,mask_exp = msks_exp,
eta,p_mu = p_mu, p_sigma = p_sigma)
alpha = exp(curr_postll - prev_postll)
if (runif(1) < alpha) {
chain[i,] <- Y
prev_var <- Y
prev_postll <- prev_postll
}else{
chain[i,] = prev_var
}
# printCount(i)
}
return(chain)
}
forms2_obs <- tidy_formulas(forms_obs[-2], kwd = "cop")
full_form_obs <- merge_formulas(forms2_obs)
wh_obs <- full_form_obs$wh
# LHS <- lhs(forms2[-length(forms2)])
msks_obs <- masks(forms_obs[-2],family = list(1,1,1),wh_obs)
theta_obs <- theta(pars = pars_obs, formulas = forms_obs[-2], full_form_obs, kwd = "cop")
forms2_exp <- tidy_formulas(forms_exp[-2], kwd = "cop")
full_form_exp <- merge_formulas(forms2_exp)
wh_exp <- full_form_exp$wh
# LHS <- lhs(forms2[-length(forms2)])
msks_exp <- masks(forms_exp[-2],family = list(1,1,1),wh_exp)
theta_exp <- theta(pars = pars_exp, formulas = forms_exp[-2], full_form_exp, kwd = "cop")
data_exp_b <- causalSamp(250,formulas = forms_exp,pars = pars_exp, family = list(1,c(5,5),1,1))
data_obs_b <- causalSamp(2500,formulas = forms_obs,pars = pars_obs, family = list(1,c(5,5),1,1))
theta_sim_raw <- run_MH_MCMC(MLE_exp, 5000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,MLE_exp, 0.2*diag(4),eta)
# fit_exp <- fitCausal(dat = data_exp_b,
#                      formulas = forms_exp[-2],
#                      family = c(1,1,1))
theta_sim_raw <- run_MH_MCMC_R(c(0,0,0,0), 5000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,eta,
p_mu = c(0,0,0,0), p_sigma = 0.2*diag(4))
theta_sim_rtnd <- theta_sim_raw[-seq(1:50),]
colMeans(theta_sim_rtnd)
run_MH_MCMC_R <- function(startval, iterations, dat_obs, dat_exp,
msks_obs,theta_obs,
msks_exp,theta_exp,
p_mu, p_sigma,eta){
## get model matrix
mm_obs <- model.matrix(full_form_obs$formula, data = dat_obs)
## get model matrix
mm_exp <- model.matrix(full_form_exp$formula, data = dat_exp)
# covariance matrix for proposal function
FI_exp <- ApproxFI_all(masks = msks_exp, theta = theta_exp, mm = mm_exp, dat = dat_exp, delta = 1e-4)
FI_obs <- ApproxFI_all(masks = msks_obs, theta = theta_obs, mm = mm_obs, dat = dat_obs, delta = 1e-4)
# }
sigma <- 2 * solve(FI_exp + eta *FI_obs)
chain <- matrix(rep(0,iterations*4), ncol = 4)
chain[1,] <- startval
prev_postll <- posterior(startval, dat_obs = dat_obs, theta_obs = theta_obs, mm_obs = mm_obs, mask_obs = msks_obs,
dat_exp = dat_exp, theta_exp = theta_exp,mm_exp = mm_exp ,mask_exp = msks_exp,
eta, p_mu = p_mu, p_sigma = p_sigma)
prev_var <- startval
for (i in 2:iterations) {
Y = proposalfunction(prev_var, sigma)
curr_postll <- posterior(Y, dat_obs = dat_obs, theta_obs = theta_obs, mm_obs = mm_obs, mask_obs = msks_obs,
dat_exp = dat_exp, theta_exp = theta_exp,mm_exp = mm_exp ,mask_exp = msks_exp,
eta,p_mu = p_mu, p_sigma = p_sigma)
alpha = exp(curr_postll - prev_postll)
if (runif(1) < alpha) {
chain[i,] <- Y
prev_var <- Y
prev_postll <- prev_postll
}else{
chain[i,] = prev_var
}
# printCount(i)
}
return(chain)
}
theta_sim_raw <- run_MH_MCMC_R(c(0,0,0,0), 5000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,eta,
p_mu = c(0,0,0,0), p_sigma = 0.2*diag(4))
theta_sim_rtnd <- theta_sim_raw[-seq(1:50),]
colMeans(theta_sim_rtnd)
debugonce(run_MH_MCMC_R)
theta_sim_raw <- run_MH_MCMC_R(c(0,0,0,0), 5000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,eta,
p_mu = c(0,0,0,0), p_sigma = 0.2*diag(4))
theta_sim_rtnd <- theta_sim_raw[-seq(1:50),]
sigma
startval
prev_postll
prev_var
Y
curr_postll
alpha
Y
curr_postll
prev_postll
run_MH_MCMC_R <- function(startval, iterations, dat_obs, dat_exp,
msks_obs,theta_obs,
msks_exp,theta_exp,
p_mu, p_sigma,eta){
## get model matrix
mm_obs <- model.matrix(full_form_obs$formula, data = dat_obs)
## get model matrix
mm_exp <- model.matrix(full_form_exp$formula, data = dat_exp)
# covariance matrix for proposal function
FI_exp <- ApproxFI_all(masks = msks_exp, theta = theta_exp, mm = mm_exp, dat = dat_exp, delta = 1e-4)
FI_obs <- ApproxFI_all(masks = msks_obs, theta = theta_obs, mm = mm_obs, dat = dat_obs, delta = 1e-4)
sigma <- 2 * solve(FI_exp + eta *FI_obs)
chain <- matrix(rep(0,iterations*4), ncol = 4)
chain[1,] <- startval
prev_postll <- posterior(startval, dat_obs = dat_obs, theta_obs = theta_obs, mm_obs = mm_obs, mask_obs = msks_obs,
dat_exp = dat_exp, theta_exp = theta_exp,mm_exp = mm_exp ,mask_exp = msks_exp,
eta, p_mu = p_mu, p_sigma = p_sigma)
prev_var <- startval
for (i in 2:iterations) {
Y = proposalfunction(prev_var, sigma)
curr_postll <- posterior(Y, dat_obs = dat_obs, theta_obs = theta_obs, mm_obs = mm_obs, mask_obs = msks_obs,
dat_exp = dat_exp, theta_exp = theta_exp,mm_exp = mm_exp ,mask_exp = msks_exp,
eta,p_mu = p_mu, p_sigma = p_sigma)
alpha = exp(curr_postll - prev_postll)
if (runif(1) < alpha) {
chain[i,] <- Y
prev_var <- Y
prev_postll <- curr_postll
}else{
chain[i,] <- prev_var
}
# printCount(i)
}
return(chain)
}
theta_sim_raw <- run_MH_MCMC_R(c(0,0,0,0), 5000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,eta,
p_mu = c(0,0,0,0), p_sigma = 0.2*diag(4))
theta_sim_rtnd <- theta_sim_raw[-seq(1:50),]
colMeans(theta_sim_rtnd)
tail(theta_sim_rtnd)
theta_sim_raw <- run_MH_MCMC(c(0,0,0,0), 5000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,c(0,0,0,0), 0.2*diag(4),eta)
theta_sim_rtnd <- theta_sim_raw[-seq(1:50),]
colMeans(theta_sim_rtnd)
tail(theta_sim_rtnd)
theta_sim_raw <- run_MH_MCMC_R(c(0,0,0,0), 5000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,eta,
p_mu = c(0,0,0,0), p_sigma = 0.2*diag(4))
theta_sim_rtnd <- theta_sim_raw[-seq(1:50),]
colMeans(theta_sim_rtnd)
tail(theta_sim_rtnd)
func2 <- function(){
data_exp_b <- causalSamp(250,formulas = forms_exp,pars = pars_exp, family = list(1,c(5,5),1,1))
data_obs_b <- causalSamp(2500,formulas = forms_obs,pars = pars_obs, family = list(1,c(5,5),1,1))
# fit_exp <- fitCausal(dat = data_exp_b,
#                      formulas = forms_exp[-2],
#                      family = c(1,1,1))
theta_sim_raw <- run_MH_MCMC_R(c(0,0,0,0), 5000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,eta,
p_mu = c(0,0,0,0), p_sigma = 0.2*diag(4))
theta_sim_rtnd <- theta_sim_raw[-seq(1:50),]
#
# MLE_exp<- fit_exp$pars$Y$beta
# MLE_exp[c(2,3)] <- fit_exp$pars$Y$beta[c(3,2)]
result<-matrix(0,1,7)
return(result)
}
start <- Sys.time()
pb <- txtProgressBar(max = n_boot, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
results <- foreach(
i = 1:n_boot,
.combine = 'rbind',
.packages = c('mvtnorm','data.table','coda','loo','rje','Rcpp'),
.options.snow = opts
) %dopar% {
# sourceCpp(file.path(code_dir,"003_ll.cpp"))
.GlobalEnv$full_form_obs <- full_form_obs
# .GlobalEnv$dGcop_sig <- dGcop_sig
# .GlobalEnv$masks <- masks
# .GlobalEnv$pars_obs <- pars_obs
# .GlobalEnv$forms_exp <- forms_exp
.GlobalEnv$full_form_exp <- full_form_exp
# .GlobalEnv$MLE_exp <- MLE_exp
x<-expit2(1)
# x<- summary(rnorm(1e7))[3]
return(x)
}
func2 <- function(){
data_exp_b <- causalSamp(250,formulas = forms_exp,pars = pars_exp, family = list(1,c(5,5),1,1))
data_obs_b <- causalSamp(2500,formulas = forms_obs,pars = pars_obs, family = list(1,c(5,5),1,1))
# fit_exp <- fitCausal(dat = data_exp_b,
#                      formulas = forms_exp[-2],
#                      family = c(1,1,1))
theta_sim_raw <- run_MH_MCMC_R(c(0,0,0,0), 5000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,eta,
p_mu = c(0,0,0,0), p_sigma = 0.2*diag(4))
theta_sim_rtnd <- theta_sim_raw[-seq(1:50),]
#
# MLE_exp<- fit_exp$pars$Y$beta
# MLE_exp[c(2,3)] <- fit_exp$pars$Y$beta[c(3,2)]
result<-colMeans(theta_sim_rtnd)
return(result)
}
start <- Sys.time()
pb <- txtProgressBar(max = n_boot, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
results <- foreach(
i = 1:n_boot,
.combine = 'rbind',
.packages = c('mvtnorm','data.table','coda','loo','rje','Rcpp'),
.options.snow = opts
) %dopar% {
# sourceCpp(file.path(code_dir,"003_ll.cpp"))
.GlobalEnv$full_form_obs <- full_form_obs
# .GlobalEnv$dGcop_sig <- dGcop_sig
# .GlobalEnv$masks <- masks
# .GlobalEnv$pars_obs <- pars_obs
# .GlobalEnv$forms_exp <- forms_exp
.GlobalEnv$full_form_exp <- full_form_exp
# .GlobalEnv$MLE_exp <- MLE_exp
x<-func2()
# x<- summary(rnorm(1e7))[3]
return(x)
}
func2 <- function(){
data_exp_b <- causalSamp(250,formulas = forms_exp,pars = pars_exp, family = list(1,c(5,5),1,1))
data_obs_b <- causalSamp(2500,formulas = forms_obs,pars = pars_obs, family = list(1,c(5,5),1,1))
# fit_exp <- fitCausal(dat = data_exp_b,
#                      formulas = forms_exp[-2],
#                      family = c(1,1,1))
# theta_sim_raw <- run_MH_MCMC_R(c(0,0,0,0), 5000, data_obs_b, data_exp_b,
#                              msks_obs,theta_obs,
#                              msks_exp,theta_exp,eta,
#                              p_mu = c(0,0,0,0), p_sigma = 0.2*diag(4))
#
# theta_sim_rtnd <- theta_sim_raw[-seq(1:50),]
#
# MLE_exp<- fit_exp$pars$Y$beta
# MLE_exp[c(2,3)] <- fit_exp$pars$Y$beta[c(3,2)]
result<-colMeans(data_exp_b)
return(result)
}
start <- Sys.time()
pb <- txtProgressBar(max = n_boot, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
results <- foreach(
i = 1:n_boot,
.combine = 'rbind',
.packages = c('mvtnorm','data.table','coda','loo','rje','Rcpp'),
.options.snow = opts
) %dopar% {
# sourceCpp(file.path(code_dir,"003_ll.cpp"))
.GlobalEnv$full_form_obs <- full_form_obs
# .GlobalEnv$dGcop_sig <- dGcop_sig
# .GlobalEnv$masks <- masks
# .GlobalEnv$pars_obs <- pars_obs
# .GlobalEnv$forms_exp <- forms_exp
.GlobalEnv$full_form_exp <- full_form_exp
# .GlobalEnv$MLE_exp <- MLE_exp
x<-func2()
# x<- summary(rnorm(1e7))[3]
return(x)
}
results
causl:::nll2
remove.packages("causl")
nll2
ll
posterior <- function(simval, dat_obs, theta_obs,mm_obs, mask_obs,
dat_exp, theta_exp,mm_exp,mask_exp,
eta,p_mu,p_sigma){
theta2_obs <- copy(theta_obs)
theta2_obs[3] <- simval[1]
theta2_obs[4] <- simval[2]
theta2_obs[5] <- simval[3]
theta2_obs[6] <- simval[4]
theta2_exp <- copy(theta_exp)
theta2_exp[3] <- simval[1]
theta2_exp[4] <- simval[2]
theta2_exp[5] <- simval[3]
theta2_exp[6] <- simval[4]
# likelihood from the observational data
ll_obs <- -nll2(
theta2_obs,
dat_obs[,c("Z","Y")],
mm_obs,
beta = mask_obs$beta_m,
phi = mask_obs$phi_m,
inCop = c(1,2),
fam_cop = 1,
family = list(1,1),
par2 = NULL,
useC = FALSE
)
# likelihood from the observational data
ll_exp <- -nll2(
theta2_exp,
dat_exp[,c("Z","Y")],
mm_exp,
beta = mask_exp$beta_m,
phi = mask_exp$phi_m,
inCop = c(1,2),
fam_cop = 1,
family = list(1,1),
par2 = NULL,
useC = FALSE
)
posterior <- dmvnorm(simval,mean = p_mu,sigma = p_sigma, log=TRUE) +
ll_exp +
eta * ll_obs
posterior
}
func2 <- function(){
data_exp_b <- causalSamp(250,formulas = forms_exp,pars = pars_exp, family = list(1,c(5,5),1,1))
data_obs_b <- causalSamp(2500,formulas = forms_obs,pars = pars_obs, family = list(1,c(5,5),1,1))
# fit_exp <- fitCausal(dat = data_exp_b,
#                      formulas = forms_exp[-2],
#                      family = c(1,1,1))
# theta_sim_raw <- run_MH_MCMC_R(c(0,0,0,0), 5000, data_obs_b, data_exp_b,
#                              msks_obs,theta_obs,
#                              msks_exp,theta_exp,eta,
#                              p_mu = c(0,0,0,0), p_sigma = 0.2*diag(4))
#
# theta_sim_rtnd <- theta_sim_raw[-seq(1:50),]
#
# MLE_exp<- fit_exp$pars$Y$beta
# MLE_exp[c(2,3)] <- fit_exp$pars$Y$beta[c(3,2)]
result<-colMeans(data_exp_b)
return(result)
}
start <- Sys.time()
pb <- txtProgressBar(max = n_boot, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
results <- foreach(
i = 1:n_boot,
.combine = 'rbind',
.packages = c('mvtnorm','data.table','coda','loo','rje','Rcpp'),
.options.snow = opts
) %dopar% {
# sourceCpp(file.path(code_dir,"003_ll.cpp"))
.GlobalEnv$full_form_obs <- full_form_obs
# .GlobalEnv$dGcop_sig <- dGcop_sig
# .GlobalEnv$masks <- masks
# .GlobalEnv$pars_obs <- pars_obs
# .GlobalEnv$forms_exp <- forms_exp
.GlobalEnv$full_form_exp <- full_form_exp
# .GlobalEnv$MLE_exp <- MLE_exp
x<-func2()
# x<- summary(rnorm(1e7))[3]
return(x)
}
func2 <- function(){
data_exp_b <- causalSamp(250,formulas = forms_exp,pars = pars_exp, family = list(1,c(5,5),1,1))
data_obs_b <- causalSamp(2500,formulas = forms_obs,pars = pars_obs, family = list(1,c(5,5),1,1))
# fit_exp <- fitCausal(dat = data_exp_b,
#                      formulas = forms_exp[-2],
#                      family = c(1,1,1))
theta_sim_raw <- run_MH_MCMC_R(c(0,0,0,0), 5000, data_obs_b, data_exp_b,
msks_obs,theta_obs,
msks_exp,theta_exp,eta,
p_mu = c(0,0,0,0), p_sigma = 0.2*diag(4))
theta_sim_rtnd <- theta_sim_raw[-seq(1:50),]
#
# MLE_exp<- fit_exp$pars$Y$beta
# MLE_exp[c(2,3)] <- fit_exp$pars$Y$beta[c(3,2)]
result<-colMeans(data_exp_b)
return(result)
}
pb <- txtProgressBar(max = n_boot, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
results <- foreach(
i = 1:n_boot,
.combine = 'rbind',
.packages = c('mvtnorm','data.table','coda','loo','rje','Rcpp'),
.options.snow = opts
) %dopar% {
# sourceCpp(file.path(code_dir,"003_ll.cpp"))
.GlobalEnv$full_form_obs <- full_form_obs
# .GlobalEnv$dGcop_sig <- dGcop_sig
# .GlobalEnv$masks <- masks
# .GlobalEnv$pars_obs <- pars_obs
# .GlobalEnv$forms_exp <- forms_exp
.GlobalEnv$full_form_exp <- full_form_exp
# .GlobalEnv$MLE_exp <- MLE_exp
x<-func2()
# x<- summary(rnorm(1e7))[3]
return(x)
}
install.packages("D:/xlin/R_code/Server/causl-main.tar.gz",repos = NULL, type = "source")
library(causl)
remove.packages("causl")
